{"version":3,"sources":["reducers/index.js","actions/index.js","components/MemeItem.js","actions/secrets.js","components/App.js","index.js"],"names":["rootReducer","combineReducers","memes","state","action","type","myMeme","meme","MemeItem","hoverState","console","log","this","props","text0","text1","temObj","template_id","id","createMeme","className","onMouseEnter","setState","onMouseLeave","onClick","postMemes","src","img","alt","name","Component","connect","new_meme_object","dispatch","params","bodyParams","Object","keys","map","key","encodeURIComponent","join","fetch","method","headers","body","then","response","json","postMemeJson","new_meme","App","memeLimit","Form","inline","Group","Label","Control","onChange","event","target","value","slice","index","url","store","createStore","applyMiddleware","thunk","subscribe","getState","data","recieveMemes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14ff3905.chunk.js","sourcesContent":["import {combineReducers} from 'redux'\r\nimport {RECIEVE_MEMES,NEW_MEME} from '../actions'\r\nfunction memes(state=[],action)\r\n{\r\n    switch(action.type)\r\n    {\r\n        case RECIEVE_MEMES:\r\n            return action.memes\r\n            default :\r\n            return state\r\n    }\r\n}\r\nfunction myMeme(state=[],action)\r\n{\r\n    switch(action.type)\r\n    {\r\n        case NEW_MEME:\r\n            return [...state,action.meme]\r\n            default:\r\n                return state\r\n    }\r\n}\r\nconst rootReducer=combineReducers({memes,myMeme});\r\nexport default rootReducer","import {username,password} from './secrets'\r\nexport const RECIEVE_MEMES='RECIEVE_MEMES'\r\nexport const NEW_MEME='NEW_MEME'\r\n\r\nfunction recieveMemes(json)\r\n{\r\n    const {memes}=json.data;\r\n    return ({\r\n        type:RECIEVE_MEMES,\r\n        memes\r\n    })\r\n    \r\n}\r\n function newMeme(meme)\r\n{\r\n    return({\r\n        type:NEW_MEME,\r\n        meme\r\n    })\r\n}\r\nfunction fetchMemesJson()\r\n{\r\n  return  fetch('https://api.imgflip.com/get_memes')\r\n    .then(response=>response.json())\r\n}\r\nexport function fetchMemes()\r\n{\r\n    return function(dispatch)\r\n    {\r\n        return fetchMemesJson()\r\n        .then(json=>dispatch(recieveMemes(json)))\r\n    }\r\n}\r\n\r\nfunction postMemeJson(params)\r\n{\r\nparams['username']=username;\r\nparams['password']=password;\r\nconst bodyParams=Object.keys(params).map(key=>{\r\n    return encodeURIComponent(key) +'='+ encodeURIComponent(params[key])\r\n}).join('&')\r\nconsole.log('bodyParams',bodyParams)\r\nreturn fetch('https://api.imgflip.com/caption_image',{\r\n    method:\"POST\",\r\n    headers:{\r\n        'Content-Type':'application/x-www-form-urlencoded'\r\n    },\r\n    body:bodyParams\r\n}).then(\r\n    response=>response.json()\r\n)\r\n}\r\n\r\nexport function createMeme(new_meme_object)\r\n{\r\nreturn function (dispatch)\r\n{\r\n    return postMemeJson(new_meme_object).then (\r\n        new_meme=>dispatch(newMeme(new_meme))\r\n    )\r\n}\r\n}","import React,{Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {createMeme} from '../actions'\r\nclass MemeItem extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super()\r\n        this.state={\r\n            hoverState:false\r\n        }\r\n    }\r\n    postMemes()\r\n    {\r\n        console.log('this.props',this.props)\r\n        const {text0,text1}=this.props;\r\n        const temObj={\r\n            template_id\t:this.props.id,\r\n            text0,\r\n            text1\r\n        }\r\n        this.props.createMeme(temObj)\r\n    }\r\n    render()\r\n    \r\n    {let meme=this.props;\r\n        return(<div className='meme-item'\r\n        onMouseEnter={()=>this.setState({hoverState:true})}\r\n        onMouseLeave={()=>this.setState({hoverState:false})}\r\n        onClick={()=>this.postMemes()}\r\n        >\r\n\r\n                \r\n            <img src={meme.img} alt={meme.name} className={this.state.hoverState ?'meme-img darken-img':'meme-img'}/>\r\n            <h4 className={this.state.hoverState? 'meme-text':'no-txt'}>{meme.name}</h4>\r\n\r\n        </div>)\r\n    }\r\n}\r\nexport default connect(null,{createMeme}) (MemeItem)","const username='dzemenu'\r\nconst password='twUe9tvR=.8YN_F'\r\nexport {username,password}","import React,{Component} from 'react'\r\nimport {connect }from 'react-redux'\r\nimport {Form} from 'react-bootstrap'\r\nimport MemeItem from './MemeItem'\r\nimport '../styles/index.css'\r\nclass App    extends Component{\r\n    constructor ()\r\n    {\r\n        super()\r\n        this.state={\r\n            memeLimit:10,\r\n            text0:'',\r\n            text1:''\r\n        }\r\n    }\r\n    render()\r\n\r\n{\r\n    return(<div>\r\n        <div><u>Welcome to Meme Generator</u></div>\r\n        <Form inline>\r\n            <h4>Write something</h4>\r\n        <Form.Group>\r\n            <Form.Label>Top</Form.Label>\r\n            <Form.Control type='text' onChange={event=>this.setState({text0:event.target.value})}></Form.Control>\r\n        </Form.Group>\r\n        <Form.Group>\r\n            <Form.Label>Bottom</Form.Label>\r\n            <Form.Control type='text' onChange={event=>this.setState({text1:event.target.value})}></Form.Control>\r\n        </Form.Group>\r\n        </Form>\r\n        \r\n        {\r\n            this.props.memes.slice(0,this.state.memeLimit).map((meme,index)=>{\r\n            return <MemeItem key={index} id={meme.id}img={meme.url} name={meme.name} text0={this.state.text0} text1={this.state.text1}/>\r\n            })\r\n        }\r\n        <div onClick={()=>this.setState({memeLimit:this.state.memeLimit+10})} className='meme-button'>Load More Memes ...</div>\r\n        </div>\r\n    )\r\n}}\r\nfunction mapStateToProps(state)\r\n{\r\n    return state;\r\n}\r\nexport default connect(mapStateToProps,null) (App);","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {createStore,applyMiddleware} from 'redux'\r\nimport {Provider}    from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\nimport App from './components/App'\r\nimport {fetchMemes} from './actions'\r\nconst store=createStore(rootReducer,applyMiddleware(thunk));\r\nstore.subscribe(()=>console.log('store',store.getState()))\r\nstore.dispatch(fetchMemes())\r\n\r\nReactDOM.render(\r\n<Provider store={store}><App/></Provider>\r\n,document.getElementById('root'));"],"sourceRoot":""}